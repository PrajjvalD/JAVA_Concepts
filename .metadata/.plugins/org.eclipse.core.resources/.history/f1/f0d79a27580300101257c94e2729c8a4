package com.collection.list;


import java.util.*;

public class StacksBasics {
	
	public void waysToInitialize() {
		 // 1. Using the Default Constructor
        Stack<String> stack1 = new Stack<>();
        System.out.println("Stack1 (default constructor): " + stack1);

        // 2. Using Constructor with Initial Capacity
        Stack<String> stack2 = new Stack<>(); // Initial capacity is 20
        System.out.println("Stack2 (initial capacity 20): " + stack2);

        // 3. Using an Existing Collection
        List<String> list = Arrays.asList("Apple", "Banana", "Cherry");
        Stack<String> stack3 = new Stack<>();
        stack3.addAll(list);
        System.out.println("Stack3 (from list): " + stack3);

        // 4. Using Arrays.asList()
        Stack<String> stack4 = new Stack<>();
        stack4.addAll(Arrays.asList("Apple", "Banana", "Cherry"));
        System.out.println("Stack4 (from Arrays.asList): " + stack4);

        // 5. Using a for loop
        Stack<Integer> stack5 = new Stack<>();
        for (int i = 0; i < 5; i++) {
            stack5.push(i); // Adds numbers 0 to 4
        }
        System.out.println("Stack5 (from for loop): " + stack5);

        // 6. Using Collections.addAll()
        Stack<String> stack6 = new Stack<>();
        Collections.addAll(stack6, "Apple", "Banana", "Cherry");
        System.out.println("Stack6 (from Collections.addAll): " + stack6);
		
	}

	public void stackOperations() {
		  // Create a Stack of Strings
        Stack<String> stack = new Stack<>();

        // 1. push(E item) - Pushes an item onto the stack
        stack.push("Apple");
        stack.push("Banana");
        stack.push("Cherry");
        System.out.println("After push: " + stack);

        // 2. pop() - Removes and returns the top item from the stack
        String poppedElement = stack.pop();
        System.out.println("Popped element: " + poppedElement);
        System.out.println("After pop: " + stack);

        // 3. peek() - Returns the top item of the stack without removing it
        String topElement = stack.peek();
        System.out.println("Top element (peek): " + topElement);

        // 4. isEmpty() - Checks if the stack is empty
        boolean isEmpty = stack.isEmpty();
        System.out.println("Is the stack empty? " + isEmpty);

        // 5. search(Object o) - Returns the 1-based position of the element from the top of the stack
        int position = stack.search("Banana");
        System.out.println("Position of 'Banana' from the top: " + position);

        // 6. size() - Returns the number of elements in the stack
        int size = stack.size();
        System.out.println("Size of the stack: " + size);

        // 7. clear() - Removes all elements from the stack (not directly available in Stack, can use removeAllElements)
        stack.clear();
        System.out.println("After clear: " + stack);

        // 8. empty() - Deprecated method to check if the stack is empty, use isEmpty() instead
        boolean isEmptyDeprecated = stack.empty(); // Deprecated, use isEmpty() instead
        System.out.println("Is the stack empty (empty method)? " + isEmptyDeprecated);

        // 9. clone() - Creates a shallow copy of the stack
        Stack<String> clonedStack = (Stack<String>) stack.clone();
        System.out.println("Cloned Stack: " + clonedStack);

        // 10. forEach(Consumer<? super E> action) - Performs the given action on each element
        stack.push("Orange");
        stack.push("Peach");
        stack.forEach(element -> System.out.println("Element using forEach: " + element));

        // 11. toArray() - Converts the stack to an array
        Object[] array = stack.toArray();
        System.out.println("Stack as array: " + Arrays.toString(array));

        // 12. toArray(T[] a) - Converts the stack to a specified type of array
        String[] stringArray = stack.toArray(new String[0]);
        System.out.println("Stack as String array: " + Arrays.toString(stringArray));
	}
	public static void main(String[] args) {
		StacksBasics stacksBasics = new StacksBasics();
		System.out.println("Stack Initialize"+"\n-----------------------");
		stacksBasics.waysToInitialize();
		System.out.println("\nStack Operations"+"\n-----------------------");
		stacksBasics.stackOperations();
	}

}
